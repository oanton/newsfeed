# this is an example of the Uber API

swagger: '2.0'
info:
  title: Newsfeed API
#  description: Newsfeed
  version: "0.0.2"
# the domain of the service
host: 0.0.0.0:8079
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api/v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /services:
    get:
      parameters:
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: An array of services
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
      security:
        - UserSecurity: []

  /registration:
    post:
      parameters:
        - name: username
          in: formData
          required: true
          type: string
          format: JSON
        - name: password
          in: formData
          required: true
          type: string
          format: JSON
      responses:
        200:
          description: OK
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        

  /logout:
    get:
      parameters:
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: OK
      security:
        - UserSecurity: []

  /user/tags:
    get:
      parameters:
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: An array of tags
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
      security:
        - UserSecurity: []
        
    post:
      parameters:
        - name: tag
          in: formData
          required: true
          type: string
          format: JSON
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: OK
      security:
        - UserSecurity: []
          
    delete:
      parameters:
        - name: tag
          in: query
          required: true
          type: string
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: OK
      security:
        - UserSecurity: []

  /articles:
    get:
      parameters:
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: An array of articles
          schema:
            type: array
            items:
              $ref: '#/definitions/Article'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
        - UserSecurity: []
  
  '/articles/{article_id}/read':
    get:
      parameters:
        - name: article_id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: OK
      security:
        - UserSecurity: []
          
  '/articles/{article_id}/unread':
    get:
      parameters:
        - name: article_id
          in: path
          required: true
          type: integer
        - $ref: '#/parameters/Authorization'
      responses:
        200:
          description: OK          
          
definitions:
  Article:
    type: object
    properties:
      article_id:
        type: integer
      title:
        type: string
      description:
        type: string
      dateCreated:
        type: integer
      dateIndexed:
        type: integer
      service_id:
        type: integer
      isRead:
        type: boolean
      url:
        type: string

  Service:
    type: object
    properties:
      service_id:
        type: integer
      name:
        type: string
      host:
        type: string
  
  Tag:
    type: object
    properties:
      name: 
        type: string
  
  Error:
    type: object
    properties:
      status:
        type: string
      statusCode:
        type: string
      messages:
        type: array
        items:
          type: string
        
parameters:
  Authorization:
    name: Authorization
    type: string
    in: header
    required: false
    format: string
    enum: ["WSSE profile=\"UsernameToken\""]

securityDefinitions:
  UserSecurity:
    type: apiKey
    name: X-WSSE
    in: header